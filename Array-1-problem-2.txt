#TC : O(m*n)
#Sc : O(1)

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        
        if(matrix==null||matrix.length==0) return new ArrayList<>();
        int left = 0;
        int right=matrix[0].length-1;
        int top = 0;
        int bottom=matrix.length-1;
       // int len = matrix[0].length*matrix.length;
        
       // int a[]=new int[len];
        List<Integer> list =  new ArrayList<>();
        int k=0;
        int dir=0;
        
        while(left<=right &&  top<=bottom)
        {
            if(dir==0){
            for(int i=left;i<=right;i++)
                list.add(matrix[top][i]);
                
                top++;
                dir=1;
            }
            
            else if(dir==1){
                for(int i=top;i<=bottom;i++)
                    list.add(matrix[i][right]);
                
                right--;
                dir=2;
            }
            else if(dir==2)
            {
               for(int i=right;i>=left;i--)
                    list.add(matrix[bottom][i]);
                
                bottom--;
                dir=3;  
            }
               else{
                   for(int i=bottom;i>=top;i--)
                    list.add(matrix[i][left]);
                
                left++;
                dir=0;
            }
                   
                   
                   
               } 
      return list;
        
    }
}